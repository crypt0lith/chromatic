from collections.abc import Buffer, Callable, Iterable, Sequence, Mapping, Iterator
from enum import IntEnum
from types import MappingProxyType
from typing import Final, Literal, Self, SupportsIndex, SupportsInt, TypeVar, TypedDict, Union, Unpack, overload
from numpy import ufunc

from chromatic._typing import AnsiColorAlias, ColorDictKeys, Float3Tuple, Int3Tuple, RGBVector

_ANSI16C_I2KV: Final[dict[int, tuple[ColorDictKeys, Int3Tuple]]]
_ANSI16C_KV2I: Final[dict[tuple[Literal['fg', 'bg'], tuple[int, int, int]], int]]
_ANSI16C_STD: Final[frozenset[int]]
_ANSI16C_BRIGHT: Final[frozenset[int]]
_ANSI256_B2KEY: Final[dict[bytes, str]]
_ANSI256_KEY2I: Final[dict[str, int]]
_SGR_PARAM_VALUES: Final[frozenset[int]]
_ANSI_FORMAT_MAP: Final[dict[AnsiColorParam, AnsiColorType]]
_ANSI_COLOR_TYPES: Final[frozenset[AnsiColorType]]
is_uint8_equiv: Final[ufunc]

_RGBVectorLike = TypeVar('_RGBVectorLike', bound=RGBVector)
_AnsiColor_co = TypeVar('_AnsiColor_co', bound=ansi_color_bytes, covariant=True)
_ColorSpec = TypeVar('_ColorSpec', bound=_CSpecType)

type _RgbCoercible = Union[Color, RGBVector, SupportsInt]
type _RgbMapping[_KT: Union[ColorDictKeys, str], _VT: _RgbCoercible] = Mapping[_KT, _VT]
type _CSpecScalar = Union[int, Color, RGBVector]
type _CSpecKVPair = tuple[ColorDictKeys, _CSpecScalar]
type _CSpecTuplePair = Union[tuple[_CSpecScalar, _CSpecScalar], tuple[_CSpecKVPair, _CSpecKVPair]]
type _CSpecDict = Mapping[ColorDictKeys, _CSpecScalar]
type _CSpecType = Union[SgrSequence, str, bytes, Union[_CSpecScalar, _CSpecTuplePair, _CSpecKVPair, _CSpecDict]]
type AnsiColorType = type[AnsiColorFormat]
type AnsiColorFormat = Union[ansi_color_4Bit, ansi_color_8Bit, ansi_color_24Bit]
type AnsiColorParam = Union[AnsiColorAlias, AnsiColorType]
class _ColorDict(TypedDict, total=False):
    fg: Union[Color, AnsiColorFormat, None]
    bg: Union[Color, AnsiColorFormat, None]
class _ColorStrKwargs(TypedDict, total=False):
    alt_spec: _ColorSpec
    ansi_type: Union[AnsiColorParam, None]
    no_reset: bool
class _ColorStrWeakVars(TypedDict, total=False):
    _base_str_: str
    _sgr_: SgrSequence
    _no_reset_: bool

def is_hex_color_int(value: int) -> bool: ...
def rgb2hexstr(rgb: RGBVector) -> str: ...
def hexstr2rgb(__str: str) -> Int3Tuple: ...
def get_default_ansi() -> type[ansi_color_8Bit | ansi_color_4Bit]: ...
def get_ansi_type(typ: AnsiColorParam) -> AnsiColorType: ...
def rgb2ansi_color_esc(ret_format: AnsiColorParam, mode: ColorDictKeys, rgb: Int3Tuple) -> bytes: ...
def randcolor() -> Color: ...
def rgb_luma_transform(rgb: Int3Tuple, start: SupportsIndex = None, num: SupportsIndex = 50, step: SupportsIndex = 1, cycle: bool | Literal['wave'] = False, ncycles: int | float = float('inf'), gradient: Int3Tuple = None, dtype: type[Color] = None) -> Iterator[Int3Tuple | int | Color]: ...
def hsl_gradient(start: Int3Tuple | Float3Tuple, stop: Int3Tuple | Float3Tuple, step: SupportsIndex, num: SupportsIndex = None, ncycles: int | float = float('inf'), replace_idx: tuple[SupportsIndex | Iterable[SupportsIndex], Iterator[Color]] = None, dtype: Callable[[Int3Tuple], int] | type[Color] = Color): ...

class SgrParameter(IntEnum):
    RESET = 0
    BOLD = 1
    FAINT = 2
    ITALICS = 3
    SINGLE_UNDERLINE = 4
    SLOW_BLINK = 5
    RAPID_BLINK = 6
    NEGATIVE = 7
    CONCEALED_CHARS = 8
    CROSSED_OUT = 9
    PRIMARY = 10
    FIRST_ALT = 11
    SECOND_ALT = 12
    THIRD_ALT = 13
    FOURTH_ALT = 14
    FIFTH_ALT = 15
    SIXTH_ALT = 16
    SEVENTH_ALT = 17
    EIGHTH_ALT = 18
    NINTH_ALT = 19
    GOTHIC = 20
    DOUBLE_UNDERLINE = 21
    RESET_BOLD_AND_FAINT = 22
    RESET_ITALIC_AND_GOTHIC = 23
    RESET_UNDERLINES = 24
    RESET_BLINKING = 25
    POSITIVE = 26
    REVEALED_CHARS = 28
    RESET_CROSSED_OUT = 29
    BLACK_FG = 30
    RED_FG = 31
    GREEN_FG = 32
    YELLOW_FG = 33
    BLUE_FG = 34
    MAGENTA_FG = 35
    CYAN_FG = 36
    WHITE_FG = 37
    ANSI_256_SET_FG = 38
    DEFAULT_FG_COLOR = 39
    BLACK_BG = 40
    RED_BG = 41
    GREEN_BG = 42
    YELLOW_BG = 43
    BLUE_BG = 44
    MAGENTA_BG = 45
    CYAN_BG = 46
    WHITE_BG = 47
    ANSI_256_SET_BG = 48
    DEFAULT_BG_COLOR = 49
    FRAMED = 50
    ENCIRCLED = 52
    OVERLINED = 53
    NOT_FRAMED_OR_CIRCLED = 54
    IDEOGRAM_UNDER_OR_RIGHT = 55
    IDEOGRAM_2UNDER_OR_2RIGHT = 60
    IDEOGRAM_OVER_OR_LEFT = 61
    IDEOGRAM_2OVER_OR_2LEFT = 62
    CANCEL = 63
    BLACK_BRIGHT_FG = 90
    RED_BRIGHT_FG = 91
    GREEN_BRIGHT_FG = 92
    YELLOW_BRIGHT_FG = 93
    BLUE_BRIGHT_FG = 94
    MAGENTA_BRIGHT_FG = 95
    CYAN_BRIGHT_FG = 96
    WHITE_BRIGHT_FG = 97
    BLACK_BRIGHT_BG = 100
    RED_BRIGHT_BG = 101
    GREEN_BRIGHT_BG = 102
    YELLOW_BRIGHT_BG = 103
    BLUE_BRIGHT_BG = 104
    MAGENTA_BRIGHT_BG = 105
    CYAN_BRIGHT_BG = 106
    WHITE_BRIGHT_BG = 107
class SgrParamWrapper:
    __slots__ = '_value_'
    def __init__[_T: (AnsiColorFormat, bytes)](self, value: _T | 'SgrParamWrapper' = b'') -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: ...) -> bool: ...
    def __bytes__(self) -> bytes: ...
    def is_same_kind(self, other: ...) -> bool: ...
    def is_reset(self) -> bool: ...
    def is_color(self) -> bool: ...
class SgrSequence:
    __slots__: tuple[str, str, str, str]
    _bytes_: bytes | Literal[False]
    _has_bright_colors_: bool
    _rgb_dict_: dict[ColorDictKeys, Int3Tuple]
    _sgr_params_: list[SgrParamWrapper]
    def __init__[_T: (Buffer, int), _AnsiType: type[AnsiColorFormat]](self, __iter: Union[Sequence[_T], Sequence[SgrParamWrapper], SgrSequence] = None, *, ansi_type: _AnsiType = None) -> None: ...
    def __eq__(self, other: ...) -> bool: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, item: ...) -> bool: ...
    def __getitem__(self, item): ...
    def __add__[_T: (SgrSequence, str)](self, other: _T) -> _T: ...
    def __radd__[_T: (SgrSequence, str)](self, other: _T) -> _T: ...
    def __iter__(self) -> Iterator[SgrParamWrapper]: ...
    def __copy__(self) -> SgrSequence: ...
    def __deepcopy__(self) -> SgrSequence: ...
    def __str__(self) -> str: ...
    def __bytes__(self) -> bytes: ...
    @property
    def rgb_dict(self) -> MappingProxyType[ColorDictKeys, Int3Tuple]: ...
    # noinspection PyUnresolvedReferences
    @rgb_dict.setter
    def rgb_dict[_AnsiColorType: type[AnsiColorFormat]](self, __value: tuple[_AnsiColorType, dict[ColorDictKeys, Color | None]]) -> None: ...
    # noinspection PyUnresolvedReferences
    @rgb_dict.deleter
    def rgb_dict(self) -> None: ...
    @property
    def fg(self) -> Int3Tuple | None: ...
    @property
    def bg(self) -> Int3Tuple | None: ...
    @property
    def has_bright_colors(self) -> bool: ...
    def add(self, __value: int) -> None: ...
    def pop(self, __index: SupportsIndex = -1) -> SgrParamWrapper: ...
    def index(self, value: ...) -> int: ...
    def find(self, value: ...) -> int: ...
    def is_reset(self) -> bool: ...
    def is_color(self) -> bool: ...
class Color(int):
    _rgb_: Int3Tuple
    _hex_: int
    def __new__(cls, __x: _RgbCoercible) -> Color: ...
    def __neg__(self) -> Color: ...
    @classmethod
    def from_rgb(cls, rgb: _RGBVectorLike) -> Color: ...
    @property
    def rgb(self) -> Int3Tuple: ...
    @property
    def hex(self) -> int: ...
class ansi_color_bytes(bytes):
    _rgb_dict_: dict[ColorDictKeys, Int3Tuple]
    def __new__(cls, __ansi: Union[bytes, _AnsiColor_co]) -> AnsiColorFormat: ...
    @classmethod
    def from_rgb(cls, __rgb: Union[_RgbMapping, _AnsiColor_co]) -> AnsiColorFormat: ...
    @property
    def rgb_dict(self) -> MappingProxyType[ColorDictKeys, Int3Tuple]: ...
class ansi_color_4Bit(ansi_color_bytes):
    @classmethod
    @overload
    def from_rgb(cls, __rgb: Union[_RgbMapping, _AnsiColor_co]) -> ansi_color_4Bit: ...
class ansi_color_8Bit(ansi_color_bytes):
    @classmethod
    @overload
    def from_rgb(cls, __rgb: Union[_RgbMapping, _AnsiColor_co]) -> ansi_color_8Bit: ...
class ansi_color_24Bit(ansi_color_bytes):
    @classmethod
    @overload
    def from_rgb(cls, __rgb: Union[_RgbMapping, _AnsiColor_co]) -> ansi_color_24Bit: ...
class ColorStr(str):
    _alt_: ColorStr | None
    _ansi_: bytes
    _ansi_type_: type[AnsiColorFormat]
    _base_str_: str
    _color_dict_: MappingProxyType[ColorDictKeys, Color]
    _no_reset_: bool
    _sgr_: SgrSequence
    _sgr_params_: list[SgrParamWrapper]
    def __new__(cls, obj: object = None, color_spec: Union[_ColorSpec, ColorStr] = None, **kwargs: Unpack[_ColorStrKwargs]) -> ColorStr: ...
    def __init__(self, obj: object = None, color_spec: Union[_ColorSpec, ColorStr] = None, **kwargs: Unpack[_ColorStrKwargs]) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[ColorStr]: ...
    def __add__[_T: (ColorStr, str, SgrParameter)](self, other: _T) -> ColorStr: ...
    def __format__(self, format_spec: str = '') -> str: ...
    def __mod__(self, __value) -> ColorStr: ...
    def __mul__(self, __value: SupportsIndex) -> ColorStr: ...
    def __matmul__(self, other: ColorStr) -> ColorStr: ...
    def __and__(self, other: ColorStr) -> Union[ColorStr, Self]: ...
    def __sub__(self, other: Union[Color, ColorStr]) -> ColorStr: ...
    def __neg__(self) -> ColorStr: ...
    def _weak_var_update(self, **kwargs: Unpack[_ColorStrWeakVars]) -> ColorStr: ...
    def as_ansi_type(self, __ansi_type: AnsiColorParam) -> ColorStr: ...
    def update_sgr(self, *p: *tuple[SgrParameter | int, ...]) -> ColorStr: ...
    def recolor(self, __value: ColorStr = None, absolute: bool = False, **kwargs: Unpack[_ColorDict]) -> ColorStr: ...
    def replace(self, __old: str, __new: str, __count: SupportsIndex = -1) -> ColorStr: ...
    def format(self, *args, **kwargs) -> ColorStr: ...
    def split(self, sep=None, maxsplit=-1) -> list[ColorStr]: ...
    @property
    def base_str(self) -> str: ...
    @property
    def ansi(self) -> bytes: ...
    @property
    def ansi_format(self) -> AnsiColorType: ...
    @property
    def rgb_dict(self) -> dict[ColorDictKeys, Int3Tuple]: ...
    @property
    def hex_dict(self) -> dict[ColorDictKeys, int]: ...
    @property
    def fg(self) -> Color | None: ...
    @property
    def bg(self) -> Color | None: ...
    @property
    def no_reset(self) -> bool: ...
    @property
    def alt(self) -> ColorStr | None: ...
    # noinspection PyUnresolvedReferences
    @alt.setter
    def alt(self, __value: Union['ColorStr', None]) -> None: ...
    # noinspection PyUnresolvedReferences
    @alt.deleter
    def alt(self) -> None: ...

